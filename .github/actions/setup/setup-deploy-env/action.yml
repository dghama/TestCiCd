name: 'Set up deploy environment'
description: 'Determine deploy env build and info based on platform'
inputs:
  build_dir:
    description: 'Directory where the build artifacts are stored'
    required: true

runs:
  using: composite
  steps:
    - name: Print build_dir
      run: |
        echo "Build directory: ${{ inputs.build_dir }}"
      shell: bash

    - name: Decompress build artifacts if Android
      if: ${{ env.PLATFORM == 'android' }}
      run: |
        echo "Decompressing Android build artifacts"
        tar -xzf "${{ inputs.build_dir }}/build_artifacts_{{ env.PLATFORM }}.tar.gz" -C "${{ inputs.build_dir }}"
      shell: bash

    - name: Check build path contents
      run: |
        echo "Contents of the build path:"
        ls -la "${{ inputs.build_dir }}"
      shell: bash

    - name: Setup deploy environment for Android
      if: ${{ env.PLATFORM == 'android' }}
      run: |
        echo "Searching for APK and JSON files in ${{ inputs.build_dir }}"

        BUILD_FILE=$(find "${{ inputs.build_dir }}" -name "*.apk" | head -n 1)
        INFO_FILE=$(find "${{ inputs.build_dir }}" -name "*.json" | head -n 1)

        if [[ -f "$BUILD_FILE" && -f "$INFO_FILE" ]]; then
          echo "BUILD_FILE=$BUILD_FILE" >> $GITHUB_ENV
          echo "INFO_FILE=$INFO_FILE" >> $GITHUB_ENV
          echo "Found BUILD_FILE: $BUILD_FILE"
          echo "Found INFO_FILE: $INFO_FILE"
        else
          echo "Required files not found in ${{ inputs.build_dir }}!" >&2
          echo "Contents of ${{ inputs.build_dir }}:"
          find "${{ inputs.build_dir }}" -type f
          exit 1
        fi
      shell: bash

    - name: Setup deploy environment for iOS
      if: ${{ env.PLATFORM == 'ios' }}
      run: |
        echo "Searching for IPA and PLIST files in ${{ inputs.build_dir }}"

        BUILD_FILE=$(find "${{ inputs.build_dir }}" -name "*.ipa" | head -n 1)
        INFO_FILE=$(find "${{ inputs.build_dir }}" -name "*.plist" | head -n 1)

        if [[ -f "$BUILD_FILE" && -f "$INFO_FILE" ]]; then
          echo "BUILD_FILE=$BUILD_FILE" >> $GITHUB_ENV
          echo "INFO_FILE=$INFO_FILE" >> $GITHUB_ENV
          echo "Found BUILD_FILE: $BUILD_FILE"
          echo "Found INFO_FILE: $INFO_FILE"
        else
          echo "Required files not found in ${{ inputs.build_dir }}!" >&2
          echo "Contents of ${{ inputs.build_dir }}:"
          find "${{ inputs.build_dir }}" -type f
          exit 1
        fi
      shell: bash
