name: 'Set up build environment'
description: 'Set up the build environment and determine build directory'
outputs:
  BUILD_DIR:
    description: 'Directory where build artifacts are stored'
    value: ${{ steps.set_build_dir.outputs.BUILD_DIR }}
  ARTIFACT_NAME:
    description: 'Name of the artifact to be uploaded'
    value: ${{ steps.set_artifact_name.outputs.ARTIFACT_NAME }}
inputs:
  ENV_PROD:
    description: 'Environment variable for production'
  ENV_STAGING:
    description: 'Environment variable for staging'
  ENV_BETA:
    description: 'Environment variable for beta'

runs:
  using: composite
  steps:
    - name: Set build directory
      id: set_build_dir
      run: |
        if [[ "${{ env.PLATFORM }}" == "android" ]]; then
          echo "BUILD_DIR=${{ github.workspace }}/android/app/build/outputs/apk/release" >> $GITHUB_ENV
        elif [[ "${{ env.PLATFORM }}" == "ios" ]]; then
          echo "BUILD_DIR=${{ github.workspace }}/ios/build/" >> $GITHUB_ENV
        else
          echo "Unsupported platform: ${{ env.PLATFORM }}" >&2
          exit 1
        fi
      shell: bash

    - name: Set artifact name
      id: set_artifact_name
      run: |
        ARTIFACT_NAME="${{ env.ENVIRONMENT }}-build-${{ github.sha }}"
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Set gradlew permissions
      if: ${{ env.PLATFORM == 'android' }}
      run: chmod +x android/gradlew
      shell: bash

    - name: Create .env file
      run: |
        case "${{ env.ENVIRONMENT }}" in
          prod)
            echo "${{ inputs.ENV_PROD }}" > .env
            ;;
          staging)
            echo "${{ inputs.ENV_STAGING }}" > .env
            ;;
          beta)
            echo "${{ inputs.ENV_BETA }}" > .env
            ;;
          *)
            echo "Unsupported environment: ${{ env.ENVIRONMENT }}" >&2
            exit 1
            ;;
        esac
      shell: bash

    - name: Verify .env file content (safely)
      run: |
        if [ -f .env ]; then
          echo ".env file exists"
          # Print number of lines in .env file without showing content
          wc -l .env
          # Optionally, print names of environment variables without values
          grep -v '^#' .env | cut -d '=' -f1
        else
          echo ".env file does not exist"
          exit 1
        fi
      shell: bash
