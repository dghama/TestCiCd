# CI/CD Pipeline configuration
name: Build and Test

on:
  # Triggers the workflow on pull request events to specified branches
  pull_request:
    branches: [develop, master]
    types: [opened, synchronize, reopened]

# Concurrency settings to prevent simultaneous runs of the same workflow
concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}' # Unique group name
  cancel-in-progress: true # Cancel any in-progress runs of the same group

# Global environment variables
env:
  CI: true
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8
  DANGER_GITHUB_BEARER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs: # Job for checking out the repository
  checkout:
    runs-on: macos-latest
    outputs:
      checkout_dir: ${{ github.workspace }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  # # Job for adding label and assign reviewers
  # label-and-assign:
  #   runs-on: macos-latest
  #   needs: [checkout]
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   steps:
  #     - name: Assign Reviewers
  #       uses: kentaro-m/auto-assign-action@v2.0.0
  #       if: github.event.action == 'opened'
  #       with:
  #         configuration-path: .github/auto_assign.yml

  #     - name: Label PR
  #       uses: actions/labeler@v5
  #       with:
  #         repo-token: '${{ secrets.GITHUB_TOKEN }}'
  #         configuration-path: .github/labeler.yml

  #     - name: Auto-assign PR to creator
  #       uses: toshimaru/auto-author-assign@v1.6.2
  #       with:
  #         repo-token: '${{ secrets.GITHUB_TOKEN }}'

  # # Job for preparing the build environment
  # prepare-environment:
  #   runs-on: macos-latest
  #   needs: [checkout]
  #   steps:
  #     - name: Prepare Build Environment
  #       uses: ./.github/actions/prepare-env-action

  # # Job for installing dependencies
  # install-dependencies:
  #   runs-on: macos-latest
  #   needs: [prepare-environment]
  #   steps:
  #     - name: Install dependencies
  #       uses: ./.github/actions/install-dependencies-action

  # # Job for running quality checks
  # quality-checks:
  #   needs: [install-dependencies]
  #   runs-on: macos-latest
  #   steps:
  #     - name: Quality Checks
  #       uses: ./.github/actions/quality-checks-action
  #       with:
  #         SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
  #         SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}

  # # Job for building the application
  # build:
  #   needs: [quality-checks]
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       platform: [ios, android] # Matrix for building both iOS and Android
  #   permissions:
  #     contents: write # Allow write permissions for repository contents
  #   env:
  #     ENVIRONMENT: 'staging'
  #     PLATFORM: ${{ matrix.platform }}

  #   steps:
  #     - name: Restore cache
  #       uses: ./.github/actions/cache-action # Custom action to restore cache

  #     - name: Setup build environment configuration and Keys
  #       uses: ./.github/actions/build-action/setup-environment-action
  #       with:
  #         # Pass secrets for Android and iOS build configurations
  #         ANDROID_KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
  #         KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  #         KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
  #         KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  #         DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
  #         PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
  #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         ENV_PROD: ${{ secrets.ENV_PROD }}
  #         ENV_STAGING: ${{ secrets.ENV_STAGING }}
  #         ENV_BETA: ${{ secrets.ENV_BETA }}
  #         ENV_DEV: ${{ secrets.ENV_DEV }}

  #     - name: Build ${{ matrix.PLATFORM }}
  #       id: fastlane-build
  #       run: bundle exec fastlane ${{ matrix.PLATFORM }} build --verbose
  #       shell: bash

  # # Job for notifying teams
  # notify-teams:
  #   needs: [quality-checks, build]
  #   runs-on: macos-latest
  #   # if: always()
  #   steps:
  #     - name: Check job status
  #       id: check
  #       run: |
  #         if [[ ${{ needs.quality-checks.result }} == 'success' && ${{ needs.build.result }} == 'success' ]]; then
  #           echo "status=success" >> $GITHUB_OUTPUT
  #         else
  #           echo "status=failure" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Notify teams
  #       uses: ./.github/actions/teams-notify
  #       with:
  #         status: ${{ steps.check.outputs.status }}
  #         webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
  #         branch_name: ${{ github.head_ref }} # Use head_ref for the branch name
  #         commit_sha: ${{ github.event.pull_request.head.sha }} # Correctly referencing the commit SHA
  #         repo_name: ${{ github.repository }}
  #         workflow_name: ${{ github.workflow }}
  #         pusher: ${{ github.actor }}
