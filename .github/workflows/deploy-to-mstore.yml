# CI/CD Pipeline configuration
name: MStore Deployment

on:
  # Triggers the workflow on push events to specified branches
  push:
    branches: [master, develop, main]

  # Allows manual triggering of the workflow with specified inputs
  workflow_dispatch:
    inputs:
      # We can choose a value for the environment input
      environment:
        description: 'Environment to build for' # Description of the input
        required: true # This input is required
        default: 'staging' # Default value if not provided
        type: choice # Input type is a choice
        options: # Options for the choice input
          - development
          - staging
          - beta
          - production
      # We can setup a default value for the version_name input for our build
      version_name:
        description: 'version name (e.g., 0.0.1)'
        required: false
        type: string
# Concurrency settings to prevent simultaneous runs of the same workflow
concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}' # Unique group name
  cancel-in-progress: true # Cancel any in-progress runs of the same group

# Global environment variables
env:
  CI: true # Set CI environment variable
  LANG: en_US.UTF-8 # Set language
  LC_ALL: en_US.UTF-8 # Set locale

jobs:
  # Job for checking out the repository
  checkout:
    runs-on: engagement-runner # Specify the runner to use
    outputs:
      checkout_dir: ${{ github.workspace }} # Output the checkout directory
    steps:
      - name: Checkout repository # Step to check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches

  # Job for preparing the build environment
  prepare-environment:
    runs-on: engagement-runner # Specify the runner
    needs: [checkout] # Depends on the checkout job
    steps:
      - name: Prepare Build Environment # Step to prepare the build environment
        uses: ./.github/actions/prepare-env-action # Custom action for preparing the environment

  # Job for installing dependencies
  install-dependencies:
    runs-on: engagement-runner # Specify the runner
    needs: [checkout, prepare-environment] # Depends on checkout and prepare jobs
    steps:
      - name: Install dependencies # Step to install dependencies
        uses: ./.github/actions/install-dependencies-action # Custom action for installing dependencies

  # Job for running quality checks
  quality-checks:
    needs: [checkout, install-dependencies] # Depends on checkout and install jobs
    runs-on: engagement-runner # Specify the runner
    steps:
      - name: Quality Checks # Step to run quality checks
        uses: ./.github/actions/quality-checks-action # Custom action for quality checks
        with:
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }} # SonarQube token from secrets
          SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }} # SonarQube host from secrets
          
  # Job for running quality checks
  increment-version:
    needs: [checkout, quality-checks]
    runs-on: engagement-runner
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      GITHUB_WORKSPACE: ${{ github.workspace }}
    outputs:
      VERSION_NAME: ${{ steps.increment.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ steps.increment.outputs.VERSION_CODE }}
    steps:
      - name: Increment Version Pre-Build
        id: increment
        run: bundle exec fastlane increment_version_pre_build


  # Job for building the application
  build:
    needs: [checkout, increment-version] # Depends on checkout and quality-checks jobs
    runs-on: engagement-runner # Specify the runner
    strategy:
      matrix:
        platform: [ios, android] # Matrix for building both iOS and Android
    permissions:
      contents: write # Allow write permissions for repository contents 
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      VERSION_NAME: ${{ needs.increment-version.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ needs.increment-version.outputs.VERSION_CODE }}
      PLATFORM: ${{ matrix.platform }}
    
    steps:
      - name: Restore cache
        uses: ./.github/actions/cache-action # Custom action to restore cache
      - name: Update iOS Version
        run: bundle exec fastlane update_${{env.PLATFORM}}_version
      - name: Setup build environment configuration and Keys # Step to set up environment keys
        run: |
            bundle exec fastlane get_current_version
      - name: Setup build environment configuration and Keys # Step to set up environment keys
        uses: ./.github/actions/build-action/setup-environment-action # Custom action to set up environment
        with:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }} # Pass the environment
          PLATFORM: ${{ matrix.platform }} # Pass the platform (iOS or Android)
          # Pass secrets for Android and iOS build configurations
          ANDROID_KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          ENV_PROD: ${{ secrets.ENV_PROD }} # Pass environment secrets
          ENV_STAGING: ${{ secrets.ENV_STAGING }}
          ENV_BETA: ${{ secrets.ENV_BETA }}
          ENV_DEV: ${{ secrets.ENV_DEV }}

      - name: Build Application # Step to build the application
        uses: ./.github/actions/build-action # Custom action for building the application
        id: build_app # Add an ID to capture outputs
        with:
          PLATFORM: ${{ matrix.platform }} # Pass the platform (iOS or Android)
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }} # Pass the environment
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token from secrets
    outputs:
      artifact_name: ${{ steps.build_app.outputs.ARTIFACT_NAME }} # Output the artifact name
      VERSION_NAME: ${{ needs.increment-version.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ needs.increment-version.outputs.VERSION_CODE }}

  # Job for deploying the application
  deploy:
    needs: [build] # Depends on the build job
    runs-on: engagement-runner # Specify the runner
    if: github.event_name == 'push'
    strategy:
      matrix:
        platform: [ios, android] # Matrix for deploying both iOS and Android
    steps:
      - name: deploy to MStore # Step to deploy to MStore
        uses: ./.github/actions/deploy-action # Custom action for deploying
        id: deploy
        with:
          PLATFORM: ${{ matrix.platform }} # Pass the platform (iOS or Android)
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }} # Pass the environment
          ARTIFACT_NAME: ${{ matrix.platform }}-${{ needs.build.outputs.artifact_name }} # Artifact name for deployment
          ANDROID_DEV_TOKEN: ${{ secrets.APP_DEV_TOKEN }} # Android development token from secrets
          IOS_DEV_TOKEN: ${{ secrets.IOS_APP_DEV_TOKEN }} # iOS development token from secrets
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }} # Authorization token from secrets
    outputs:
      ANDROID_VERSION_TOKEN: ${{ steps.deploy.outputs.ANDROID_VERSION_TOKEN }}
      IOS_VERSION_TOKEN: ${{ steps.deploy.outputs.IOS_VERSION_TOKEN }}

  # Job for bumping the version
  bump-version:
    needs: [deploy,build] # Depends on the deploy job
    if: github.event_name == 'push'
    runs-on: engagement-runner # Specify the runner
    env:
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }} # Git token from secrets
      VERSION_NAME: ${{ needs.build.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ needs.build.outputs.VERSION_CODE }}
    steps:
      - name: push new version # Step to push the new version        
        run: |
          bundle exec fastlane push_version_changes
    outputs:
      ANDROID_VERSION_TOKEN: ${{ needs.deploy.outputs.ANDROID_VERSION_TOKEN }}
      IOS_VERSION_TOKEN: ${{ needs.deploy.outputs.IOS_VERSION_TOKEN }}

  # Job for notifying teams
  notify-teams:
    needs: [bump-version,deploy,build]
    runs-on: engagement-runner # Specify the runner
    if: always()
    steps:
      - name: Check job status
        id: check
        run: |
          if [[ ${{ needs.bump-version.result }} == 'success' && ${{ needs.build.result }} == 'success' ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify teams # Step to notify teams about the new version
        uses: ./.github/actions/teams-notify # Custom action to notify teams
        with:
          status: ${{ steps.check.outputs.status }} # Pass the job status (success or failure)
          webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }} # Teams webhook URL from secrets
          custom_message: | # Custom message for Teams notification
            New version is available on MStore :
          android_version_url: ${{ needs.bump-version.outputs.ANDROID_VERSION_TOKEN }} # URL for Android version
          ios_version_url: ${{ needs.bump-version.outputs.IOS_VERSION_TOKEN }} # URL for iOS version
          branch_name: ${{ github.ref_name }}
          commit_sha: ${{ github.event.head_commit.message }}
          repo_name: ${{ github.event.repository.name }}
          workflow_name: ${{ github.workflow }}
