# CI/CD Pipeline configuration
name: MStore Deployment

on:
  # Triggers the workflow on push events to specified branches
  # Triggers the workflow on pull request events to specified branches
  pull_request:
    branches: [develop, master]
    types: [opened, synchronize, reopened]

  # Allows manual triggering of the workflow with specified inputs
  workflow_dispatch:
    inputs:
      # We can choose a value for the environment input
      environment:
        description: 'Environment to build for' # Description of the input
        required: true
        default: 'staging' # Default value if not provided
        type: choice
        options:
          - development
          - staging
          - beta
          - production
      # We can setup a default value for the version_name input for our build
      version_name:
        description: 'version name (e.g., 0.0.1)'
        required: false
        type: string

# Concurrency settings to prevent simultaneous runs of the same workflow
concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}' # Unique group name
  cancel-in-progress: true # Cancel any in-progress runs of the same group

# Global environment variables
env:
  CI: true # Set CI environment variable
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8

jobs:
  # Job for checking out the repository
  checkout:
    runs-on: macos-latest
    outputs:
      checkout_dir: ${{ github.workspace }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  # Job for preparing the build environment
  prepare-environment:
    runs-on: macos-latest
    needs: [checkout]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare Build Environment
        uses: ./.github/actions/prepare-env-action

  # Job for installing dependencies
  install-dependencies:
    runs-on: macos-latest
    needs: [prepare-environment]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies-action

  # Job for running quality checks
  quality-checks:
    needs: [install-dependencies]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Quality Checks
        uses: ./.github/actions/quality-checks-action
        with:
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}

  # Job for running quality checks
  increment-version:
    needs: [quality-checks]
    runs-on: macos-latest
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      GITHUB_WORKSPACE: ${{ github.workspace }}
    outputs:
      VERSION_NAME: ${{ steps.increment.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ steps.increment.outputs.VERSION_CODE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version:
            '3.3.0'
            # Step 7: Install Ruby dependencies
      - name: Install Ruby dependencies
        run: |
          bundle install --jobs 4 --retry 3 # Install gems with parallel jobs and retry on failure
        shell: bash

      - name: Increment Version Pre-Build
        id: increment
        run: bundle exec fastlane increment_version_pre_build

  # Job for building the application
  build:
    needs: [increment-version]
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [ios, android] # Matrix for building both iOS and Android
    permissions:
      contents: write # Allow write permissions for repository contents
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      PLATFORM: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version:
            '3.3.0'
            # Step 7: Install Ruby dependencies
      - name: Install Ruby dependencies
        run: |
          bundle install --jobs 4 --retry 3 # Install gems with parallel jobs and retry on failure
        shell: bash
      - name: Restore cache
        uses: ./.github/actions/cache-action # Custom action to restore cache

      - name: Setup build environment configuration and Keys
        uses: ./.github/actions/build-action/setup-environment-action
        with:
          # Pass secrets for Android and iOS build configurations
          ANDROID_KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          ENV_PROD: ${{ secrets.ENV_PROD }}
          ENV_STAGING: ${{ secrets.ENV_STAGING }}
          ENV_BETA: ${{ secrets.ENV_BETA }}
          ENV_DEV: ${{ secrets.ENV_DEV }}

      - name: Build ${{ matrix.PLATFORM }}
        id: fastlane-build
        run: bundle exec fastlane ${{ matrix.PLATFORM }} build --verbose
        env:
          VERSION_NAME: ${{ needs.increment-version.outputs.VERSION_NAME }}
          VERSION_CODE: ${{ needs.increment-version.outputs.VERSION_CODE }}
        shell: bash

      - name: upload artifact
        uses: ./.github/actions/build-action/setup-artifact
        id: build_app

    outputs:
      artifact_name: ${{ steps.build_app.outputs.ARTIFACT_NAME }}
      VERSION_NAME: ${{ needs.increment-version.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ needs.increment-version.outputs.VERSION_CODE }}

  # Job for deploying the application
  deploy:
    needs: [build]
    runs-on: macos-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        platform: [ios, android] # Matrix for deploying both iOS and Android
    steps:
      - name: deploy to MStore
        uses: ./.github/actions/deploy-action
        id: deploy
        with:
          PLATFORM: ${{ matrix.platform }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
          ARTIFACT_NAME: ${{ matrix.platform }}-${{ needs.build.outputs.artifact_name }}
          ANDROID_DEV_TOKEN: ${{ secrets.APP_DEV_TOKEN }}
          IOS_DEV_TOKEN: ${{ secrets.IOS_APP_DEV_TOKEN }}
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
    outputs:
      ANDROID_VERSION_TOKEN: ${{ steps.deploy.outputs.ANDROID_VERSION_TOKEN }}
      IOS_VERSION_TOKEN: ${{ steps.deploy.outputs.IOS_VERSION_TOKEN }}

  # Job for bumping the version
  bump-version:
    needs: [deploy, build]
    if: github.event_name == 'push'
    runs-on: macos-latest
    env:
      VERSION_NAME: ${{ needs.build.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ needs.build.outputs.VERSION_CODE }}
    steps:
      - name: push new version
        run: |
          bundle exec fastlane push_version_changes
    outputs:
      ANDROID_VERSION_TOKEN: ${{ needs.deploy.outputs.ANDROID_VERSION_TOKEN }}
      IOS_VERSION_TOKEN: ${{ needs.deploy.outputs.IOS_VERSION_TOKEN }}

  # Job for notifying teams about the new version or failure
  notify-teams:
    needs: [bump-version, deploy, build]
    runs-on: macos-latest
    if: always()
    steps:
      - name: Check job status
        id: check
        run: |
          if [[ ${{ needs.bump-version.result }} == 'success' && ${{ needs.build.result }} == 'success' ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify teams
        uses: ./.github/actions/teams-notify
        with:
          status: ${{ steps.check.outputs.status }}
          webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
          custom_message: |
            New version is available on MStore :
          android_version_url: ${{ needs.bump-version.outputs.ANDROID_VERSION_TOKEN }}
          ios_version_url: ${{ needs.bump-version.outputs.IOS_VERSION_TOKEN }}
          branch_name: ${{ github.ref_name }}
          commit_sha: ${{ github.sha }}
          repo_name: ${{ github.event.repository.name }}
          workflow_name: ${{ github.workflow }}
          pusher: ${{ github.actor }}

  # Job for cleaning artifacts from the repository
  clean-artifacts:
    runs-on: macos-latest
    needs: [notify-teams]
    steps:
      - name: Clean Artifacts
        run: bundle exec fastlane delete_github_artifacts
