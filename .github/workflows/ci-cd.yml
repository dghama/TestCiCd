name: CI/CD Pipeline

on:
  push:
    branches: [master, develop, main]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build for'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - alpha
          - beta
          - prod

      version_name:
        description: 'version name (e.g., 0.0.1)'
        required: false
        type: string

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  CI: true
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
jobs:
  prepare-environment:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup android environment
        uses: ./.github/actions/setup/android-runner
      - name: Setup ios environment
        uses: ./.github/actions/setup/ios-runner
      - name: Setup environment CONFIG
        run: |
          # Create .env file based on the selected environment
          echo "${{ secrets.ENV_env.ENVIRONMENT }}" > .env

  install-dependencies:
    runs-on: macos-latest
    needs: prepare-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        uses: ./.github/actions/dependency-installation

  quality-checks:
    needs: install-dependencies
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check PR codeBase
        uses: ./.github/actions/pr-check
        env:
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}

  build:
    needs: quality-checks
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [android, ios]
    permissions:
      contents: write
    env:
      PLATFORM: ${{ matrix.platform }}
      ANDROID_KEYSTORE_FILE: ${{ github.workspace }}/android/app/release.keystore
      KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
      PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore node modules from cache
        uses: ./.github/actions/cache-restore

      - name: Set up environment
        id: setup_env
        uses: ./.github/actions/setup/setup-build-env

      - name: Build ${{ matrix.platform }}
        run: |
          bundle exec fastlane ${{ matrix.platform }} build
        shell: bash
        working-directory: ${{ github.workspace }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: '${{ matrix.platform }}-${{ github.sha }}-${{ steps.setup_env.outputs.ARTIFACT_NAME }}'
          path: '${{ matrix.platform }}-build_artifacts/*' # Use wildcard if there are multiple files
          compression-level: 6
          overwrite: false

    outputs:
      build_dir: ${{ steps.setup_env.outputs.BUILD_DIR }}
      artifact_name: ${{ steps.setup_env.outputs.ARTIFACT_NAME }}

  deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [android, ios]
    env:
      PLATFORM: ${{ matrix.platform }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
      APP_DEV_TOKEN: ${{ secrets.APP_DEV_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore node modules from cache
        uses: ./.github/actions/cache-restore

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: '${{ needs.build.outputs.artifact_name }}'
          path: '${{ matrix.platform }}-build_artifacts'

      - name: Set up deploy environment
        id: setup_deploy_env
        uses: ./.github/actions/setup/setup-deploy-env
        with:
          build_dir: '${{ matrix.platform }}-build_artifacts'

      - name: Upload ${{ matrix.platform }} - ${{ env.ENVIRONMENT }} application to MStore
        if: ${{ env.ENVIRONMENT }} != 'prod'
        run: |
          result=$(bundle exec fastlane upload_app_to_mstore)
          echo "VERSION_URL=${result}" >> $GITHUB_ENV
        shell: bash
        working-directory: ${{ github.workspace }}

    outputs:
      version_url: ${{ steps.setup_deploy_env.outputs.VERSION_URL }}

  notify-teams:
    if: github.event_name == 'push'
    needs: deploy
    runs-on: macos-latest
    steps:
      - name: Notify teams
        uses: ./.github/actions/teams-notify
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_message: |
            New version is available on MStore.
          android_version_url: ${{ needs.deploy.outputs.android_version_url }}
          ios_version_url: ${{ needs.deploy.outputs.ios_version_url }}
