name: CI/CD Pipeline

on:
  push:
    branches: [master, develop, main]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  APP_NAME: ${{ secrets.APP_NAME }}
  CI: true

jobs:
  prepare-environment:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup android environment
        uses: ./.github/actions/build-test/android-setup/android-runner
      - name: Setup ios environment
        uses: ./.github/actions/build-test/ios-setup/ios-runner
      - name: Install dependencies
        uses: ./.github/actions/build-test/dependency-installation

  install-dependencies:
    runs-on: macos-latest
    needs: prepare-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        uses: ./.github/actions/build-test/dependency-installation

  quality-checks:
    needs: install-dependencies
    runs-on: macos-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR codeBase
        uses: ./.github/actions/build-test/pr-check

      - name: Perform SonarQube scan
        uses: ./.github/actions/build-test/sonar-report
        env:
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}

  build-ios:
    if: github.event_name == 'push'
    needs: quality-checks
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build iOS
        id: build_ios
        uses: ./.github/actions/build-test/ios-setup/ios-build
        env:
          PLATFORM: ios
          IOS_BUILD_FILE: ios/build/${{ secrets.APP_NAME }}.ipa
          IOS_INFO_FILE: ios/build/${{ secrets.APP_NAME }}-info.plist

  build-android:
    if: github.event_name == 'push'
    needs: quality-checks
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Android
        uses: ./.github/actions/build-test/android-setup/android-build
        env:
          PLATFORM: android
          ANDROID_KEYSTORE_FILE: ${{ github.workspace }}/android/app/release.keystore
          ANDROID_BUILD_DIR: ${{ github.workspace }}/android/app/build/outputs/apk/release
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

  # mirror-exclusions:
  #   if: github.event_name == 'push'
  #   runs-on: macos-latest
  #   needs: [build-ios, build-android]
  #   outputs:
  #     clean-repo-path: ${{ steps.unzip.outputs.unzipped-path }}
  #   steps:
  #     - name: Download repository
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: repo
  #     - name: Update script permissions
  #       run: chmod +x ./.github/scripts/create-mirror.sh
  #     - name: Create mirror repository
  #       run: ./.github/scripts/create-mirror.sh
  #     - name: Unzip cleaned repository
  #       id: unzip
  #       run: unzip clean-repo.zip -d clean-repo
  #     - name: Set cleaned repo path
  #       run: echo "clean-repo-path=clean-repo" >> $GITHUB_ENV

  deploy-android:
    if: github.event_name == 'push'
    needs: build-android
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Upload Android to MStore
        uses: ./.github/actions/mstore-upload/android-upload
        env:
          ANDROID_BUILD_FILE: ${{ github.workspace }}/android/app/build/outputs/apk/release/app-release.apk
          ANDROID_INFO_FILE: ${{ github.workspace }}/android/app/build/outputs/apk/release/output-metadata.json
          ANDROID_BUILD_DIR: ${{ github.workspace }}/android/app/build/outputs/apk/release
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          APP_DEV_TOKEN: ${{ secrets.APP_DEV_TOKEN }}

  deploy-ios:
    if: github.event_name == 'push'
    needs: build-ios
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Upload iOS App
        uses: ./.github/actions/app-upload/upload
        env:
          IOS_BUILD_FILE: ios/build/${{ secrets.APP_NAME }}.ipa
          IOS_INFO_FILE: ios/build/${{ secrets.APP_NAME }}-info.plist
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          APP_DEV_TOKEN: ${{ secrets.APP_DEV_TOKEN }}

  notify-teams:
    if: github.event_name == 'push'
    needs: [deploy-ios, deploy-android]
    runs-on: macos-latest
    steps:
      - name: Notify teams
        uses: ./.github/actions/teams-notify
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_message: 'New version is available on MStore'
