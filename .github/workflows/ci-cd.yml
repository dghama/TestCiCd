name: CI/CD Pipeline

on:
  push:
    branches: [master, develop, main]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build for'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - beta
          - production

      version_name:
        description: 'version name (e.g., 0.0.1)'
        required: false
        type: string

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  CI: true
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
jobs:
  checkout:
    runs-on: macos-latest
    outputs:
      checkout_dir: ${{ github.workspace }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  prepare-environment:
    runs-on: macos-latest
    needs: checkout
    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Yarn globally
        run: corepack enable && corepack prepare yarn@stable --activate

  install-dependencies:
    runs-on: macos-latest
    needs: prepare-environment
    steps:
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Node dependencies
        run: yarn install --frozen-lockfile
        shell: bash

  quality-checks:
    needs: install-dependencies
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check PR codeBase
        uses: ./.github/actions/pr-check
        env:
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}

  build:
    needs: quality-checks
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [android, ios]
    permissions:
      contents: write
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

      PLATFORM: ${{ matrix.platform }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore node modules from cache
        uses: ./.github/actions/cache-restore

      - name: Set up Android-specific secrets
        if: matrix.platform == 'android'
        env:
          ANDROID_KEYSTORE_FILE: ${{ github.workspace }}/android/app/release.keystore
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > ${{ env.ANDROID_KEYSTORE_FILE }}
          echo "ANDROID_KEYSTORE_FILE=${{ env.ANDROID_KEYSTORE_FILE }}" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
        shell: bash

      - name: Set up iOS-specific secrets
        if: matrix.platform == 'ios'
        env:
          DISTRIBUTION_CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > distribution.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          echo "P12_PASSWORD=${{ secrets.P12_PASSWORD }}" >> $GITHUB_ENV

        shell: bash

      - name: Set up  for different environments
        id: setup_env
        uses: ./.github/actions/build-environment
        with:
          ENV_PROD: ${{ secrets.ENV_PROD }}
          ENV_STAGING: ${{ secrets.ENV_STAGING }}
          ENV_BETA: ${{ secrets.ENV_BETA }}
          ENV_DEV: ${{ secrets.ENV_DEV }}

      - name: Build ${{ matrix.platform }}
        run: bundle exec fastlane ${{ matrix.platform }} build
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          ENVFILE: ${{ env.ENVFILE }}
      - name: BUILD List downloaded artifact directory
        run: ls -R ${{ github.workspace }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ steps.setup_env.outputs.ARTIFACT_NAME }}
          path: ${{ steps.setup_env.outputs.BUILD_DIR }}
          compression-level: 6
          overwrite: false

    outputs:
      artifact_name: ${{ steps.setup_env.outputs.artifact_name }}

  deploy:
    needs: build
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [android, ios]
    env:
      PLATFORM: ${{ matrix.platform }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore cache
        uses: ./.github/actions/cache-restore

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ needs.build.outputs.artifact_name }}

      - name: Set up deploy environment
        id: setup_deploy_env
        uses: ./.github/actions/deploy-environment

      - name: Set up APP_DEV_TOKEN for ${{ matrix.platform }} platform
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            echo "APP_DEV_TOKEN=${{ secrets.APP_DEV_TOKEN }}" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" == "ios" ]; then
            echo "APP_DEV_TOKEN=${{ secrets.IOS_APP_DEV_TOKEN }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Upload ${{ matrix.platform }} - ${{ env.ENVIRONMENT }} application to MStore
        if: ${{ env.ENVIRONMENT != 'production' }}
        env:
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          WORKSPACE: ${{ github.workspace }}
        run: |
          bundle exec fastlane upload_app_to_mstore
        shell: bash

      - name: Set output
        run: |
          echo "ANDROID_VERSION_TOKEN=${{ env.ANDROID_VERSION_TOKEN }}" >> $GITHUB_OUTPUT
          echo "IOS_VERSION_TOKEN=${{ env.IOS_VERSION_TOKEN }}" >> $GITHUB_OUTPUT
        shell: bash

  notify-teams:
    if: github.event_name == 'push'
    needs: deploy
    runs-on: macos-latest
    steps:
      - name: Notify teams
        uses: ./.github/actions/teams-notify
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_message: |
            New version is available on MStore :
          android_version_url: ${{ needs.deploy.outputs.ANDROID_VERSION_TOKEN }}
          ios_version_url: ${{ needs.deploy.outputs.IOS_VERSION_TOKEN }}
