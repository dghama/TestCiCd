require 'pathname'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane


default_platform(:android)

before_all do
  @package = load_json(json_path: "package.json")
  @environment = ENV["ENVIRONMENT"] || "staging"
  @app_name = @package['name']
  @platform = ENV["PLATFORM"]
  puts "Loaded package: #{@package}"
  puts "Environment: #{@environment}"
  puts "Version Type: #{@version_type}"
  puts "App Name: #{@app_name}"
  puts "Platform: #{@platform}"
end


def project_dir
  Pathname.new(File.expand_path('..', Dir.pwd))
end

def android_dir
  project_dir.join('android')
end

def ios_dir
  project_dir.join('ios')
end

def gradle_file
  android_dir.join('app', 'build.gradle')
end
def increment_version_code
  gradle_file_path = android_dir.join('app', 'build.gradle').to_s
  gradle_file = File.read(gradle_file_path)
  current_version_code = gradle_file.match(/versionCode\s+(\d+)/)[1].to_i
  new_version_code = current_version_code + 1
  updated_gradle_file = gradle_file.gsub(/versionCode\s+\d+/, "versionCode #{new_version_code}")
  File.write(gradle_file_path, updated_gradle_file)
  new_version_code
end

def get_android_version_code
  gradle_file_path = android_dir.join('app', 'build.gradle').to_s
  gradle_file = File.read(gradle_file_path)
  gradle_file.match(/versionCode\s+(\d+)/)[1]
end

def get_android_version_name
  gradle_file_path = android_dir.join('app', 'build.gradle').to_s
  gradle_file = File.read(gradle_file_path)
  version_name_match = gradle_file.match(/versionName\s+"(.+)"/)
  if version_name_match
    version_name_match[1]
  else
    UI.error("Could not find versionName in #{gradle_file_path}")
    nil
  end
end

platform :ios do
  desc 'iOS: Increment build number and set the version to package.json version.'
  private_lane :inc_ver_ios do
    increment_build_number(
      xcodeproj: "./ios/#{@package['name']}.xcodeproj"
    )

  end

  desc 'Build the iOS app'
  lane :build do
    inc_ver_ios
    cocoapods(
      clean_install: true,
      podfile: "./ios/Podfile",
    )
    build_app(
      workspace: "./ios/#{@package['name']}.xcworkspace",
      scheme: @package['name'],
      export_method: "app-store",
      output_directory: "./ios/build",
      output_name: "#{@package['name']}.ipa"
    )
  end
end

platform :android do
  desc 'Increment versionCode and set versionName to package.json version.'
  private_lane :inc_ver_and do
    increment_version_code
  end

  version_code = get_android_version_code
  version_name = get_android_version_name

  desc 'Build the Android app'
  lane :build do
    inc_ver_and
    gradle(
      task: "clean assembleRelease",
      project_dir: "android/",
      properties: {
        "output.name" => "#{@app_name}-#{@environment}-#{version_name}-#{version_code}.apk",
        "android.injected.signing.store.file" => ENV["KEYSTORE_FILE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )
  end
end

desc 'Commit version changes'
lane :commit_version_changes do
  # Get the current branch name
  current_branch = sh("git rev-parse --abbrev-ref HEAD").strip
  ensure_git_branch(branch: current_branch)

  version_code = get_android_version_code
  version_name = get_android_version_name

  # Stage changes
  git_add(path: ["android/app/build.gradle"])
  
  # Commit changes
  commit_message = "Bump versionCode to #{version_code}, versionName to #{version_name}"
  git_commit(message: commit_message)
  
  # Add tag with a consistent and meaningful format
  tag_name = "v#{version_name}-#{version_code}-#{@environment}"
  add_git_tag(tag: tag_name)

  # Push changes and tags to the remote repository
  push_to_git_remote(
    remote: "https://x-access-token:#{ENV['GIT_TOKEN']}@github.com/dghama/TestCiCd.git",
    local_branch: current_branch,  # Use the current branch name
    tags: true
  )

  push_git_tags

  UI.success("Successfully committed and pushed version changes")
end



desc 'Upload the app to the MStore'
lane :upload_app_to_mstore do
  mstore_upload_app(
    authorization: ENV['AUTHORIZATION'],
    app_dev_token: ENV['APP_DEV_TOKEN'],
    info_file: ENV['INFO_FILE'],
    build_file: ENV['BUILD_FILE']
  )
end