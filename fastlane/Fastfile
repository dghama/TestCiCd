# Fastfile

require 'pathname'

default_platform(:android)

before_all do
  ensure_git_status_clean
  @package = load_json(json_path: "package.json")
  @environment = ENV["ENVIRONMENT"] || "staging"
  @version_type = ENV["VERSION_TYPE"] || "patch"
  @app_name = @package['name']

  puts "Loaded package: #{@package}"
  puts "Environment: #{@environment}"
  puts "Version Type: #{@version_type}"
  puts "App Name: #{@app_name}"
end

def project_dir
  Pathname.new(File.expand_path('..', Dir.pwd))
end

def android_dir
  project_dir.join('android')
end

def ios_dir
  project_dir.join('ios')
end

def gradle_file
  android_dir.join('app', 'build.gradle')
end

def generate_version_string(version)
  version_str = version.to_s.strip
  version_str = @package['version'] if version_str.empty?
  
  case @environment
  when "prod"
    "#{@app_name}-#{version_str}"
  when "staging"
    "#{@app_name}-#{version_str}-rc"
  when "dev"
    "#{@app_name}-#{version_str}-dev"
  when "beta"
    "#{@app_name}-#{version_str}-beta"
  else
    "#{@app_name}-#{version_str}-#{@environment}"
  end
end

def get_android_version_name
  version_name = nil
  File.open(gradle_file, 'r') do |file|
    file.each_line do |line|
      if line.include? "versionName"
        version_name = line.split('"')[1]
        break
      end
    end
  end
  version_name
end

def get_android_version_code
  version_code = nil
  File.open(gradle_file, 'r') do |file|
    file.each_line do |line|
      if line.include? "versionCode"
        version_code = line.split(' ').last.to_i
        break
      end
    end
  end
  version_code
end

platform :ios do
  desc 'iOS: Increment build number and set the version to package.json version.'
  private_lane :inc_ver_ios do
    new_version = increment_version_number(
      xcodeproj: ios_dir.join("#{@app_name}.xcodeproj"),
      version_number: @package['version'],
      bump_type: @version_type
    )

    new_version_with_app_name = generate_version_string(new_version)

    increment_version_number(
      xcodeproj: ios_dir.join("#{@app_name}.xcodeproj"),
      version_number: new_version_with_app_name
    )

    increment_build_number(
      xcodeproj: ios_dir.join("#{@app_name}.xcodeproj")
    )
  end

  desc 'Build the iOS app'
  lane :build do
    inc_ver_ios
    cocoapods(
      clean_install: true,
      podfile: ios_dir.join("Podfile"),
    )
    
    version = get_version_number(xcodeproj: ios_dir.join("#{@app_name}.xcodeproj"))
    build_number = get_build_number(xcodeproj: ios_dir.join("#{@app_name}.xcodeproj"))
    output_dir = ios_dir.join("builds", @environment, "#{version}_#{build_number}")
    
    build_app(
      workspace: ios_dir.join("#{@app_name}.xcworkspace"),
      scheme: @app_name,
      export_method: "app-store",
      output_directory: output_dir,
      output_name: "#{@app_name}.ipa",
      skip_codesigning: true
    )
    
    File.write(output_dir.join("build_info.txt"), "Version: #{version}\nBuild: #{build_number}\nEnvironment: #{@environment}")
  end
end

platform :android do
  desc 'Android: Increment versionCode and set versionName to package.json version.'
  private_lane :inc_ver_and do
    current_version_code = get_android_version_code
    new_version_code = current_version_code + 1
    
    updated_gradle_file = File.read(gradle_file).gsub(/versionCode \d+/, "versionCode #{new_version_code}")
    File.write(gradle_file, updated_gradle_file)
    
    new_version_name = generate_version_string(@package['version'])
    updated_gradle_file = File.read(gradle_file).gsub(/versionName ".*"/, "versionName \"#{new_version_name}\"")
    File.write(gradle_file, updated_gradle_file)
  end

  desc 'Build the Android app'
  lane :build do
    inc_ver_and
    
    version_name = get_android_version_name
    version_code = get_android_version_code
    output_dir = android_dir.join("builds", @environment, "#{version_name}_#{version_code}")
    
    gradle(
      task: "clean assembleRelease",
      project_dir: android_dir,
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
        "output.dir" => output_dir
      }
    )
    
    File.write(output_dir.join("build_info.txt"), "Version: #{version_name}\nBuild: #{version_code}\nEnvironment: #{@environment}")
  end

  desc 'Upload the app to the MStore'
  lane :upload_app_to_mstore do
    mstore_upload_app(
      authorization: ENV['AUTHORIZATION'],
      app_dev_token: ENV['APP_DEV_TOKEN'],
      info_file: ENV['INFO_FILE'],
      build_file: ENV['BUILD_FILE']
    )
  end

  desc 'Print the current version'
  lane :print_version do
    if is_ios?
      version = get_version_number(xcodeproj: ios_dir.join("#{@app_name}.xcodeproj"))
      puts "Current iOS version: #{version}"
    elsif is_android?
      version = get_android_version_name
      puts "Current Android version: #{version}"
    end
  end

  desc 'Bump build numbers, and set the version to match the package.json version.'
  lane :commit_version_changes do
    sh("git add .")
    version_name = get_android_version_name
    message = "Bump version to #{version_name}"
    git_commit(
      path: '.',
      message: message
    )
    add_git_tag(
      tag: @package['version']
    )
    git_push
  end
end