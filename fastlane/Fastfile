require 'pathname'

default_platform(:android)

before_all do
  @package = load_json(json_path: "package.json")
  @environment = ENV["ENVIRONMENT"] || "staging"
  @app_name = @package['name']
  @platform = ENV["PLATFORM"]
  @versionName = ENV["VERSION_NAME"]

  puts "Loaded package: #{@package}"
  puts "Environment: #{@environment}"
  puts "App Name: #{@app_name}"
  puts "Platform: #{@platform}"
end

def project_dir
  Pathname.new(File.expand_path('..', Dir.pwd))
end

def android_dir
  project_dir.join('android')
end

def ios_dir
  project_dir.join('ios')
end

def gradle_file
  android_dir.join('app', 'build.gradle')
end

def increment_version_code
  gradle_file_path = android_dir.join('app', 'build.gradle').to_s
  gradle_file_content = File.read(gradle_file_path)

  current_version_code = gradle_file_content.match(/versionCode\s+(\d+)/)[1].to_i
  new_version_code = current_version_code + 1
  updated_gradle_file_content = gradle_file_content.gsub(/versionCode\s+\d+/, "versionCode #{new_version_code}")

  if @versionName
    updated_gradle_file_content = updated_gradle_file_content.gsub(/versionName\s+"[^"]*"/, "versionName \"#{@versionName}.#{new_version_code}\"")
  else
    current_version_name = gradle_file_content.match(/versionName\s+"([^"]*)"/)[1]
    new_version_name = "#{current_version_name}.#{new_version_code}"
    updated_gradle_file_content = updated_gradle_file_content.gsub(/versionName\s+"[^"]*"/, "versionName \"#{new_version_name}\"")
  end

  File.write(gradle_file_path, updated_gradle_file_content)

  package_json_path = project_dir.join('package.json')
  package_json = JSON.parse(File.read(package_json_path))
  package_json['version'] = @versionName || new_version_name
  File.write(package_json_path, JSON.pretty_generate(package_json))
  
  new_version_code
end

def get_android_version_code
  gradle_file_path = android_dir.join('app', 'build.gradle').to_s
  gradle_file = File.read(gradle_file_path)
  gradle_file.match(/versionCode\s+(\d+)/)[1]
end

def get_android_version_name
  gradle_file_path = android_dir.join('app', 'build.gradle').to_s
  gradle_file = File.read(gradle_file_path)
  version_name_match = gradle_file.match(/versionName\s+"(.+)"/)
  if version_name_match
    version_name_match[1]
  else
    UI.error("Could not find versionName in #{gradle_file_path}")
    nil
  end
end

platform :ios do


  desc 'iOS: Increment build number and set the version to package.json version.'
  private_lane :inc_ver_ios do
    increment_build_number(
      xcodeproj: "./ios/#{@package['name']}.xcodeproj"
    )
  end

    desc 'Build the iOS app'
    lane :build do
      inc_ver_ios
    
      # Ensure directories are created
      sh 'mkdir -p ./certs'
      sh 'mkdir -p ./profiles'
    
      # Decode and save certificate and provisioning profile
      File.write('./certs/Certificates12Mob.p12', Base64.decode64(ENV['DISTRIBUTION_CERTIFICATE']))
      File.write('./profiles/RNTestProfile.mobileprovision', Base64.decode64(ENV['PROVISIONING_PROFILE']))
    
      # Unlock the default keychain
      sh "security unlock-keychain -p ${P12_PASSWORD} ~/Library/Keychains/login.keychain-db"
  
      # Import the certificate into the existing default keychain
      sh "security import ./certs/Certificates12Mob.p12 -k ~/Library/Keychains/login.keychain-db -P \"${P12_PASSWORD}\" -T /usr/bin/codesign"
    
      # Copy provisioning profile to the appropriate directory
      provisioning_profiles_dir = File.expand_path("~/Library/MobileDevice/Provisioning Profiles")
      sh "mkdir -p '#{provisioning_profiles_dir}'"
      sh "cp ./profiles/RNTestProfile.mobileprovision '#{provisioning_profiles_dir}'"
    
      # Install CocoaPods dependencies
      cocoapods(
        clean_install: true,
        podfile: "./ios/Podfile"
      )
    
      # Build the app
      build_app(
        workspace: "./ios/#{@package['name']}.xcworkspace",
        scheme: @package['name'],
        configuration: @environment,
        output_name: "#{@package['name']}.ipa",
        export_options: {
          export_method: "ad-hoc",
          provisioning_profiles: {
            "com.mobelite.testRNcicd" => "RNTestProfile"
          },
          signing_style: "manual",
          export_team_id: "45F3786CHA"
        }
      )
    end
  
  end
  

platform :android do
  desc 'Increment versionCode and set versionName to package.json version.'
  private_lane :inc_ver_and do
    increment_version_code
  end

  version_code = get_android_version_code
  version_name = get_android_version_name

  desc 'Build the Android app'
  lane :build do
    inc_ver_and
    gradle(
      task: "clean assembleRelease",
      project_dir: "android/",
      properties: {
        "output.name" => "#{@app_name}-#{@environment}",
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"]
      },
      print_command: true
    )
  end
end

desc 'Upload the app to the MStore'
lane :upload_app_to_mstore do
  mstore_upload_app(
    authorization: ENV['AUTHORIZATION'],
    app_dev_token: ENV['APP_DEV_TOKEN'],
    info_file: ENV['INFO_FILE'],
    build_file: ENV['BUILD_FILE']
  )
end
