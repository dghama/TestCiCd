require 'json'

default_platform(:android)

before_all do
  @package = load_json(json_path: "package.json")
  @environment = ENV["ENVIRONMENT"] || "staging"
  @app_name = @package['name']
  @versionName = ENV["VERSION_NAME"]

  puts "Loaded package: #{@package}"
  puts "Environment: #{@environment}"
  puts "App Name: #{@app_name}"

end

platform :ios do
  lane :setup_certs_and_profile do
    # Access the runner temp directory and file paths
    runner_temp = ENV['RUNNER_TEMP']
    distribution_cert_path = File.join(runner_temp, 'distribution.p12')
    provisioning_profile_path = File.join(runner_temp, 'profile.mobileprovision')
    create_keychain(
      name: "build.keychain",
      password: "temporary_password",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    import_certificate(
      certificate_path: distribution_cert_path,
      certificate_password: ENV["P12_PASSWORD"],
      keychain_name: "build.keychain",
      keychain_password: "temporary_password"
    )

    install_provisioning_profile(
      path: provisioning_profile_path
    )
  end

  
  lane :build do

    setup_certs_and_profile
    cocoapods(
      clean_install: true,
      podfile: "./ios/Podfile"
    )
    gym(
        configuration: ENV["ENVIRONMENT"],
        workspace: "./ios/#{@package['name']}.xcworkspace",
        scheme: @package['name'],
        output_name: @package['name'],
        output_directory: "./ios/build",
        export_options: {
          method: "ad-hoc",
          provisioningProfiles: {
            "com.mobelite.testRNcicd" => "RNTestProfile"
          },
          signingStyle: "manual",
        },
        xcargs: "-allowProvisioningUpdates",
        export_xcargs: "-allowProvisioningUpdates"
    )
    
    end
  end



platform :android do
  lane :build do
    gradle(
      task: "clean assembleRelease",
      project_dir: "android/",
      properties: {
        "output.name" => "#{@app_name}-#{@environment}",
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
        "env.file" => ENV["ENVFILE"],
      },
     
      print_command: true
    )
  end
end

# Upload the app to MStore
lane :upload_app_to_mstore do

    result = mstore_upload_app(
      authorization: ENV['AUTHORIZATION'],
      app_dev_token: ENV['APP_DEV_TOKEN'],
      info_file: ENV['INFO_FILE'],
      build_file: ENV['BUILD_FILE'],
      platform: ENV['PLATFORM']
    )
end

def commit_version_changes(version_data,message)
  current_branch = sh("git rev-parse --abbrev-ref HEAD").strip
  ensure_git_branch(branch: current_branch)

  # Stage all changes
  git_add(path: ".")

  # Create the commit message
  git_commit(path: ".", message: message)

  UI.success("Successfully committed version changes for but not pushed")
end

lane :push_version_changes do
  current_branch = sh("git rev-parse --abbrev-ref HEAD").strip

  # Push to the same branch
  add_git_tag(tag: "v#{ENV['VERSION_NAME']}-#{ENV['VERSION_CODE']}-#{@environment}")

  # Note: i need to change the remoteurl with a dynamic variable
  push_to_git_remote(
    remote: "https://x-access-token:#{ENV['GIT_TOKEN']}@github.com/mobelitelabs/RNCICDTemplate-",
    local_branch: "HEAD",
    remote_branch: current_branch,
    tags: true
  )
  
  UI.success("Successfully pushed version changes")
end


############## start from here #################


def load_version_data
  load_json(json_path: "#{ENV['GITHUB_WORKSPACE']}/versions.json")
end

def save_version_data(data)
  File.write("#{ENV['GITHUB_WORKSPACE']}/versions.json", JSON.pretty_generate(data))
end

def increment_version
  data = load_version_data
  env = ENV["ENVIRONMENT"]
  
  data[env]['version_code'] += 1
  
  save_version_data(data)
  data[env]
end

def update_package_json(version_data)
  package_json_path = "#{ENV['GITHUB_WORKSPACE']}/package.json"
  package_data = load_json(json_path: package_json_path)
  
  package_data['version'] = version_data['version_name']
  
  File.write(package_json_path, JSON.pretty_generate(package_data))
end

lane :increment_version_pre_build do
  version_data = increment_version()
  
  # Update package.json
  update_package_json(version_data)
  message = "'Bump version to #{version_data['version_name']} (#{version_data['version_code']})'"
  # Commit changes
  commit_version_changes(version_data,message)
  
  # Output new version info
  puts "New version: #{version_data['version_name']} (#{version_data['version_code']})"
  
  # Set output for GitHub Actions
  sh "echo \"VERSION_NAME=#{version_data['version_name']}\" >> $GITHUB_OUTPUT"
  sh "echo \"VERSION_CODE=#{version_data['version_code']}\" >> $GITHUB_OUTPUT"
end

lane :update_ios_version do
  version_data = load_version_data[ENV["ENVIRONMENT"]]
  update_ios_files(version_data)
  message= "'Update #{ENV['PLATFORM']} files to version #{version_data['version_name']} (#{version_data['version_code']})'"
  commit_version_changes(version_data, message)
end

lane :update_android_version do
  version_data = load_version_data[ENV["ENVIRONMENT"]]
  update_android_files(version_data)
  message= "'Update #{ENV['PLATFORM']} files to version #{version_data['version_name']} (#{version_data['version_code']})'"
  commit_version_changes(version_data,message)
end


def update_ios_files(version_data)
  set_info_plist_value(
    path: "./ios/#{@package['name']}/Info.plist",
    key: "CFBundleShortVersionString",
    value: version_data['version_name']
  )
  set_info_plist_value(
    path: "./ios/#{@package['name']}/Info.plist",
    key: "CFBundleVersion",
    value: version_data['version_code'].to_s
  )
  increment_build_number(
    build_number: version_data['version_code'],
    xcodeproj: "./ios/#{@package['name']}.xcodeproj"
  )
end

def update_android_files(version_data)
  gradle_file = "#{ENV['GITHUB_WORKSPACE']}/android/app/build.gradle"
  sh "sed -i '' 's/versionCode .*/versionCode #{version_data['version_code']}/' #{gradle_file}"
  sh "sed -i '' 's/versionName .*/versionName \"#{version_data['version_name']}\"/' #{gradle_file}"
end

lane :get_current_version do
  data = load_version_data
  env = ENV["ENVIRONMENT"]
  version_data = data[env]
  puts "Current version for #{env}: #{version_data['version_name']} (#{version_data['version_code']})"
  
  version_data
end

